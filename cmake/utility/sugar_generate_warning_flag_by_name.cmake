# This file generated automatically:
# https://github.com/ruslo/sugar/wiki/Cross-platform-warning-suppression

# Copyright (c) 2014, Ruslan Baratov
# All rights reserved.

include(sugar_add_this_to_sourcelist)
sugar_add_this_to_sourcelist()

include(sugar_expected_number_of_arguments)
include(sugar_fatal_error)
include(sugar_status_debug)

function(sugar_generate_warning_flag_by_name warning_flags warning_name)
  sugar_expected_number_of_arguments(${ARGC} 2)

  sugar_status_debug("Flags by name: ${warning_name}")

  ### Check preconditions
  if(is_clang OR is_msvc OR is_gcc)
    # Supported compilers
  else()
    sugar_fatal_error("")
  endif()

  string(COMPARE EQUAL "ALL" "${warning_name}" is_all)
  if(is_all)
    # Skip this (already processed)
    set(${warning_flags} "" PARENT_SCOPE)
    return()
  endif()

  set(result "")

  ### c++98-compat
  string(COMPARE EQUAL "c++98-compat" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "c++98-compat")
    endif()
    if(is_gcc)
      list(APPEND result "c++98-compat")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### c++98-compat-pedantic
  string(COMPARE EQUAL "c++98-compat-pedantic" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "c++98-compat-pedantic")
    endif()
    if(is_gcc)
      list(APPEND result "c++98-compat-pedantic")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### cast-align
  string(COMPARE EQUAL "cast-align" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "cast-align")
    endif()
    if(is_gcc)
      list(APPEND result "cast-align")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### conditional-uninitialized
  string(COMPARE EQUAL "conditional-uninitialized" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "conditional-uninitialized")
    endif()
    if(is_gcc)
      list(APPEND result "conditional-uninitialized")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### conversion
  string(COMPARE EQUAL "conversion" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "conversion")
    endif()
    if(is_gcc)
      list(APPEND result "conversion")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### covered-switch-default
  string(COMPARE EQUAL "covered-switch-default" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "covered-switch-default")
    endif()
    if(is_gcc)
      list(APPEND result "covered-switch-default")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### deprecated
  string(COMPARE EQUAL "deprecated" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "deprecated")
    endif()
    if(is_gcc)
      list(APPEND result "deprecated")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### deprecated-register
  string(COMPARE EQUAL "deprecated-register" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "deprecated-register")
    endif()
    if(is_gcc)
      list(APPEND result "deprecated-register")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### disabled-macro-expansion
  string(COMPARE EQUAL "disabled-macro-expansion" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "disabled-macro-expansion")
    endif()
    if(is_gcc)
      list(APPEND result "disabled-macro-expansion")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### documentation
  string(COMPARE EQUAL "documentation" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "documentation")
    endif()
    if(is_gcc)
      list(APPEND result "documentation")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### documentation-unknown-command
  string(COMPARE EQUAL "documentation-unknown-command" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "documentation-unknown-command")
    endif()
    if(is_gcc)
      list(APPEND result "documentation-unknown-command")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### extra-semi
  string(COMPARE EQUAL "extra-semi" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "extra-semi")
    endif()
    if(is_gcc)
      list(APPEND result "extra-semi")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### global-constructors
  string(COMPARE EQUAL "global-constructors" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "global-constructors")
    endif()
    if(is_gcc)
      list(APPEND result "global-constructors")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### implicit-fallthrough
  string(COMPARE EQUAL "implicit-fallthrough" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "implicit-fallthrough")
    endif()
    if(is_gcc)
      list(APPEND result "implicit-fallthrough")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### missing-noreturn
  string(COMPARE EQUAL "missing-noreturn" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "missing-noreturn")
    endif()
    if(is_gcc)
      list(APPEND result "missing-noreturn")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### non-virtual-dtor
  string(COMPARE EQUAL "non-virtual-dtor" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "non-virtual-dtor")
    endif()
    if(is_gcc)
      list(APPEND result "non-virtual-dtor")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### old-style-cast
  string(COMPARE EQUAL "old-style-cast" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "old-style-cast")
    endif()
    if(is_gcc)
      list(APPEND result "old-style-cast")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### padded
  string(COMPARE EQUAL "padded" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "padded")
    endif()
    if(is_gcc)
      list(APPEND result "padded")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### shift-sign-overflow
  string(COMPARE EQUAL "shift-sign-overflow" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "shift-sign-overflow")
    endif()
    if(is_gcc)
      list(APPEND result "shift-sign-overflow")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### switch-enum
  string(COMPARE EQUAL "switch-enum" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "switch-enum")
    endif()
    if(is_gcc)
      list(APPEND result "switch-enum")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### undef
  string(COMPARE EQUAL "undef" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "undef")
    endif()
    if(is_gcc)
      list(APPEND result "undef")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### unreachable-code
  string(COMPARE EQUAL "unreachable-code" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "unreachable-code")
    endif()
    if(is_gcc)
      list(APPEND result "unreachable-code")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### unused-parameter
  string(COMPARE EQUAL "unused-parameter" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "unused-parameter")
    endif()
    if(is_gcc)
      list(APPEND result "unused-parameter")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### used-but-marked-unused
  string(COMPARE EQUAL "used-but-marked-unused" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "used-but-marked-unused")
    endif()
    if(is_gcc)
      list(APPEND result "used-but-marked-unused")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  ### weak-vtables
  string(COMPARE EQUAL "weak-vtables" "${warning_name}" hit)
  if(hit)
    if(is_clang)
      list(APPEND result "weak-vtables")
    endif()
    if(is_gcc)
      list(APPEND result "weak-vtables")
    endif()
    set(${warning_flags} "${result}" PARENT_SCOPE)
    return()
  endif()

  message("Unknown warning name: ${warning_name}")
  message("List of known warnings: https://github.com/ruslo/leathers/wiki/List")
  sugar_fatal_error("")
endfunction()
